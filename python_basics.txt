#################################
Python basics
#################################

Python is a flexible object-oriented programming language that is often used in the biological sciences. If you have Mac or Linux OS python should already be installed on your computer. Type the following into your command line to see if you have python installed and the version:

python --version

This tutorial runs on python version 3 or above. If you have 2.7 or below installed, there will some syntax issues. Instructions for installing python can be found here: https://www.python.org/downloads


#################################
Syntax 
#################################

Python programs are written as text documents and end with the .py extension. Typically, python scripts begin with #!/usr/bin/python (#! is called a shebang) which indicates the location of your python install and makes the script executable (though this isn't strictly necessary). Unlike other programming languages (such as perl or R), blocks of code are not specified by brackets or bracers. Instead, blocks of code are indicated by indentation and colons. For example:

if (x > y):
	print("x is greater than y")
else:
	print("x is less than or equal to y")

In this script, a print statement is run depending on which criteria is met as set up in the if, else statements. It's good practice to include comments in your code with further information on what a particular block of code or statement does (or is intented to do). Comments in python are indicated by the # sign. For example:

if (x > y):
	print("x is greater than y") #python will ignore this text
else:
	print("x is less than or equal to y") 

#################################
Data types
#################################

Like R or any other programming language, variables or objects that you define or import into the python workspace have different data types. Data types are not declared by the user, instead they are inferred from the assignment statement. It's important to note that sometimes python will infer the WRONG data type. Be sure to check that your variables are assigned in the proper format to avoid problems down the road.

Most common data types:
Boolean --> True or False
Integer --> full number (eg: 5)
Float --> number with a fractional value (eg: 1.234)
String --> some letter, sentence, word etc

#################################
Statements and expressions
#################################

Very simply, variables or objects are assigned to some value with the = sign. For example, if I wanted this string: Hello world, to be assigned to a variable I could do so by:

my_string = "Hello world"

This stores "Hello world" to the variable name my_string but does nothing else. If I wanted my string to be printed to the screen you can call the print statement:

print(my_string)

#Note: in ipython you can just call the variable to print to screen

Notice that strings are specified by quotes (double or single) but not variable names. Strings that span multiple lines are indicated by """ Some long string """.

#################################
Loops
#################################

There are many ways to iterate through a list of objects or for a specific number of times in python. The most common ways are by using a for or while loop. For loops iterate over some predefined number. For example:

for x in range(0,10):
	print("Value is now: %i" % x)

This will print a count down to your screen from zero to nine. Note that 10 is not included! Everything UP TO your upper range limit is printed. While loops are very similar but instead of iterating over a number of objects or instances it will run the loop as long as some statement is true. For example:

b = 0
a = 10

while (b < a):
	print("b is still less than a")
	b += 1

In this loop we first initialize two new variables, a and b. In each pass of the while loop python evaluates whether or not b is less than a, prints a string to screen, and finally adds one to our b variable. The += operator is known as a contraction operator and is equivalent to b = b+1. If you wanted your loop to evaluate two separate conditions you can add another useful loop statement, else:

while (b < a):
	print("b is still less than a")
	b += 1
else:
	print("b is now more than a")
	

#################################
Math and other operators
#################################

Operators are like functions that can be used to calculate or compare variables or objects. Arithmatic operators in python include the following:

Addition: +
7 + 3
Subtraction: -
7 - 3
Multiplication: *
7 * 3
Division: / 
7 / 3
Exponentiation: **
7 **3
Modulus: % (this finds the remainder after division of one number by another, it is NOT the same as division)
7 % 3

It may also be useful to compare two or more variables or have some sort of logical statement. To compare objects:

Is equal to: ==
7 == 3
7 == 7
Is not equal to: != (! is often called a bang or shriek in programming. So != is "bang equals")
7 != 3
Less than: <
7 > 3
More than: >
7 < 3
Less than or equal to: <=
7 <= 3
More than or equal to: >=
7 >= 3

Some other special statements in python are useful for evaluating logical conditions. For example:

True and True #this returns true
True and False #returns false
True or False #returns true
True or True #returns true
not False #returns true
not True #returns true

#################################
Library importation
#################################

Many modules or expressions in python are not included by default and instead must be loaded into the python environment. For example, say you want to include the functions of BioPython in your script. You can do so by adding the following line to the beginning of your code:

import Bio

Where import is the library importation command and Bio is the name of the BioPython library. More typically, however, you'll want to include specific tools from the larger library. For example, if I wanted to import SeqIO, a function that can be used to import sequence files, from BioPython I could do so like so:

from Bio import SeqIO

It's usually a good idea to import specific modules from your library instead of the full library to cut down on memory usage. Additionally, you may need to install the library before it is available to use. Installation instructions for BioPython can be found here:

http://biopython.org/DIST/docs/install/Installation.html

#################################
IPython
#################################

One of the nicest things about python is it's interactive shell environment IPython. You will need to install this separately but it provides an easy way to debug or test out parts of your script. It also has the extra benefit of tab completion and you can use most Unix command lines within the shell. Instructions for downloading and installing ipython can be found here:

http://ipython.org/install.html

#################################
Example
#################################

So let's test this out by writing a small script that converts a genbank formatted file to a fasta file. First open up a terminal and run IPython by typing:

ipython

Now write out your script by first importing the SeqIO module from BioPython

from Bio import SeqIO

#let's try to get some information from this file

for seqRecord in SeqIO.parse("my_file.gb", "genbank"):
	print(seqRecord)

#this is all of the info you can get from your seqRecord object
#pull out a couple interesting bits of info

seqRecord.id
seqRecord.name
seqRecord.description
seqRecord.seq

#what about the information with a / before it? -- these are elements of other larger groupings -- so for example, 

Number of features: 4
/molecule_type=DNA
/data_file_division=PLN
/date=14-SEP-2000
/accessions=['AF297471']
/sequence_version=1
/gi=10121868
/keywords=['']
/source=rape
/organism=Brassica napus
/taxonomy=['Eukaryota', 'Viridiplantae', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliophyta', 'eudicotyledons', 'core eudicots', 'Rosidae', 'eurosids II', 'Brassicales', 'Brassicaceae', 
'Brassica']
/references=[Reference(title='BN28a, a low temperature-induced gene of Brassica napus', ...), Reference(title='Direct Submission', ...)]

#these are annotations -- what if you want to get a list of the organisms?

for seqRecord in SeqIO.parse("my_file.gb", "genbank"):
	print(seqRecord.annotations["organism"])

#ok now let's convert genbank to fasta
#first need an output handle -- place holder for your output file
output_handle = open("my_file.fa", "w")

#now write in fasta format
for seqRecord in SeqIO.parse("my_file.gb", "genbank"):
	output_handle.write(">%s %s\n%s\n" % (seqRecord.id, seqRecord.description, seqRecord.seq))	

#close the output handle
output_handle.close()
